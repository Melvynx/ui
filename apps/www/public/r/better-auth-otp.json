{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "better-auth-otp",
  "type": "registry:block",
  "title": "Better Auth OTP",
  "description": "A component for signing in with email OTP.",
  "dependencies": [
    "motion",
    "react-use-measure",
    "@hookform/resolvers"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card",
    "input-otp",
    "sonner"
  ],
  "files": [
    {
      "path": "blocks/better-auth-otp/components/better-auth-otp.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { AnimatePresence, motion } from \"motion/react\"\nimport useMeasure from \"react-use-measure\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\nimport { Label } from \"@/components/ui/label\"\n\nimport { useCountdown } from \"../hooks/use-countdown\"\n\nexport type OtpFormProps = {\n  sendOtp: (email: string) => Promise<void>\n  verifyOtp: (email: string, otp: string) => Promise<void>\n  defaultEmail?: string\n  resendCooldown?: number\n  onSuccess?: () => void\n  onError?: (error: string) => void\n}\n\ntype Step = \"email\" | \"otp\"\n\nexport function OtpForm({\n  sendOtp,\n  verifyOtp,\n  defaultEmail = \"\",\n  resendCooldown = 60,\n  onSuccess,\n  onError,\n}: OtpFormProps) {\n  const [step, setStep] = useState<Step>(\"email\")\n  const [email, setEmail] = useState(defaultEmail)\n  const [isLoading, setIsLoading] = useState(false)\n  const [otpResetKey, setOtpResetKey] = useState(0)\n  const [direction, setDirection] = useState(1)\n  const [ref, bounds] = useMeasure()\n\n  const handleSendOtp = async (data: { email: string }) => {\n    setIsLoading(true)\n    try {\n      await sendOtp(data.email)\n      setEmail(data.email)\n      setDirection(1)\n      setStep(\"otp\")\n    } catch (error) {\n      onError?.(error instanceof Error ? error.message : \"Failed to send OTP\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleVerifyOtp = async (otp: string) => {\n    setIsLoading(true)\n    try {\n      await verifyOtp(email, otp)\n      onSuccess?.()\n    } catch (error) {\n      onError?.(error instanceof Error ? error.message : \"Invalid OTP\")\n      setOtpResetKey((prev) => prev + 1)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleResendOtp = async () => {\n    setIsLoading(true)\n    try {\n      await sendOtp(email)\n    } catch (error) {\n      onError?.(error instanceof Error ? error.message : \"Failed to resend OTP\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleBack = () => {\n    setDirection(-1)\n    setStep(\"email\")\n  }\n\n  return (\n    <motion.div animate={{ height: bounds.height }}>\n      <div ref={ref}>\n        <AnimatePresence mode=\"wait\" custom={direction}>\n          {step === \"email\" ? (\n            <motion.div\n              key=\"email-step\"\n              variants={variants}\n              initial=\"initial\"\n              animate=\"active\"\n              exit=\"exit\"\n              transition={{ duration: 0.15 }}\n              custom={direction}\n            >\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault()\n                  void handleSendOtp({ email })\n                }}\n                className=\"space-y-4\"\n              >\n                <div className=\"space-y-2\">\n                  <Label>Email</Label>\n                  <Input\n                    placeholder=\"john@doe.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    disabled={isLoading}\n                    type=\"email\"\n                    required\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"ring-offset-card w-full ring-offset-2\"\n                >\n                  {isLoading ? \"Sending...\" : \"Sign in\"}\n                </Button>\n              </form>\n            </motion.div>\n          ) : (\n            <motion.div\n              key=\"otp-step\"\n              variants={variants}\n              initial=\"initial\"\n              animate=\"active\"\n              exit=\"exit\"\n              transition={{ duration: 0.15 }}\n              custom={direction}\n            >\n              <div className=\"flex w-full flex-col items-start gap-4\">\n                <p className=\"text-muted-foreground text-sm\">\n                  A one-time password has been sent to{\" \"}\n                  <span className=\"font-bold\">{email}</span>{\" \"}\n                  <button\n                    onClick={handleBack}\n                    className=\"hover:text-foreground underline\"\n                    disabled={isLoading}\n                    type=\"button\"\n                  >\n                    Edit email\n                  </button>\n                </p>\n\n                <div className=\"flex items-center gap-2\">\n                  <OtpInput\n                    key={otpResetKey}\n                    onVerify={handleVerifyOtp}\n                    isLoading={isLoading}\n                  />\n\n                  <ResendButton\n                    onResend={handleResendOtp}\n                    isLoading={isLoading}\n                    cooldown={resendCooldown}\n                  />\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </motion.div>\n  )\n}\n\nconst variants = {\n  initial: (direction: number) => {\n    return { x: `${20 * direction}px`, opacity: 0 }\n  },\n  active: { x: \"0%\", opacity: 1 },\n  exit: (direction: number) => {\n    return { x: `${-20 * direction}px`, opacity: 0 }\n  },\n}\n\ntype OtpStepProps = {\n  onVerify: (otp: string) => Promise<void>\n  isLoading: boolean\n}\n\nfunction OtpInput({ onVerify, isLoading }: OtpStepProps) {\n  const [otpValue, setOtpValue] = useState(\"\")\n\n  const handleOtpChange = (value: string) => {\n    setOtpValue(value)\n    if (value.length === 6) {\n      void onVerify(value)\n    }\n  }\n\n  return (\n    <InputOTP\n      maxLength={6}\n      value={otpValue}\n      onChange={handleOtpChange}\n      disabled={isLoading}\n      className={cn({\n        \"animate-pulse\": isLoading,\n      })}\n    >\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  )\n}\n\ntype ResendButtonProps = {\n  onResend: () => void\n  isLoading: boolean\n  cooldown: number\n}\n\nfunction ResendButton({ onResend, isLoading, cooldown }: ResendButtonProps) {\n  const countdown = useCountdown(cooldown)\n\n  const handleResend = () => {\n    countdown.reset()\n    onResend()\n  }\n\n  return (\n    <button\n      onClick={handleResend}\n      disabled={isLoading || !countdown.isCountdownFinished}\n      type=\"button\"\n      className={cn(\n        \"text-muted-foreground hover:text-foreground text-sm underline\",\n        \"disabled:cursor-not-allowed disabled:opacity-50\",\n        {\n          \"animate-pulse\": isLoading,\n        }\n      )}\n    >\n      Resend {countdown.count > 0 ? `(${countdown.count})` : \"\"}\n    </button>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/better-auth-otp/hooks/use-countdown.ts",
      "content": "import { useEffect, useState } from \"react\"\n\nexport const useCountdown = (initialCount: number) => {\n  const [count, setCount] = useState(initialCount)\n\n  useEffect(() => {\n    if (count <= 0) return\n\n    const interval = setInterval(() => {\n      setCount((prev) => Math.max(0, prev - 1))\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [count])\n\n  return {\n    count,\n    isCountdownFinished: count <= 0,\n    reset: () => setCount(initialCount),\n  }\n}\n",
      "type": "registry:hook"
    }
  ],
  "categories": [
    "authentication"
  ]
}