{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "better-auth-otp-demo",
  "type": "registry:example",
  "registryDependencies": [
    "https://ui.nowts.app/r/better-auth-otp.json",
    "card",
    "button"
  ],
  "files": [
    {
      "path": "examples/better-auth-otp-demo.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { toast } from \"sonner\"\n\nimport { OtpForm } from \"@/registry/nowts/blocks/better-auth-otp/components/better-auth-otp\"\n\n// Mock authClient for demo\nconst mockAuthClient = {\n  emailOtp: {\n    sendVerificationOtp: async ({ email }: { email: string; type: string }) => {\n      // Simulate network delay\n      await new Promise((resolve) => setTimeout(resolve, 1500))\n\n      // Simulate error for certain emails\n      if (email === \"error@example.com\") {\n        return { error: { message: \"Failed to send OTP\" } }\n      }\n\n      return { data: { success: true } }\n    },\n  },\n  signIn: {\n    emailOtp: async ({ email, otp }: { email: string; otp: string }) => {\n      // Simulate network delay\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Simulate success if OTP = \"123456\"\n      if (otp === \"123456\") {\n        return { data: { user: { email, id: \"1\" } } }\n      }\n\n      return { error: { message: \"Invalid OTP code\" } }\n    },\n  },\n}\n\nexport function BetterAuthOtpDemo() {\n  const [isSuccess, setIsSuccess] = useState(false)\n\n  if (isSuccess) {\n    return (\n      <div className=\"w-[400px] rounded-lg border border-green-200 bg-green-50 p-6 dark:border-green-800 dark:bg-green-950/20\">\n        <div className=\"space-y-3 text-center\">\n          <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100 dark:bg-green-900/30\">\n            <svg\n              className=\"h-6 w-6 text-green-600 dark:text-green-400\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M5 13l4 4L19 7\"\n              />\n            </svg>\n          </div>\n          <h3 className=\"text-lg font-semibold text-green-800 dark:text-green-200\">\n            Successfully signed in!\n          </h3>\n          <p className=\"text-sm text-green-600 dark:text-green-300\">\n            You are now logged into your account.\n          </p>\n          <button\n            onClick={() => setIsSuccess(false)}\n            className=\"text-sm text-green-700 underline hover:no-underline dark:text-green-300\"\n          >\n            Restart demo\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-[400px] space-y-4\">\n      <div className=\"space-y-2 text-center\">\n        <h2 className=\"text-lg font-semibold\">Better Auth OTP Demo</h2>\n        <p className=\"text-muted-foreground text-sm\">\n          Enter your email to receive a verification code\n        </p>\n      </div>\n\n      <div className=\"bg-card rounded-lg border p-6\">\n        <OtpForm\n          sendOtp={async (email) => {\n            const result = await mockAuthClient.emailOtp.sendVerificationOtp({\n              email,\n              type: \"sign-in\",\n            })\n            if (result.error) throw new Error(result.error.message)\n          }}\n          verifyOtp={async (email, otp) => {\n            const result = await mockAuthClient.signIn.emailOtp({ email, otp })\n            if (result.error) throw new Error(result.error.message)\n          }}\n          onSuccess={() => {\n            toast.success(\"Successfully signed in!\")\n            setIsSuccess(true)\n          }}\n          onError={(error) => toast.error(error)}\n          defaultEmail=\"demo@example.com\"\n          resendCooldown={10} // Reduced for demo\n        />\n      </div>\n\n      <div className=\"text-muted-foreground bg-muted/30 space-y-1 rounded border p-3 text-xs\">\n        <p>\n          <strong>ðŸ’¡ Demo tips:</strong>\n        </p>\n        <p>\n          â€¢ Use code <code className=\"bg-background rounded px-1\">123456</code>{\" \"}\n          to simulate successful sign in\n        </p>\n        <p>\n          â€¢ Use{\" \"}\n          <code className=\"bg-background rounded px-1\">error@example.com</code>{\" \"}\n          to test error handling\n        </p>\n        <p>â€¢ Cooldown is reduced to 10s for easier testing</p>\n      </div>\n    </div>\n  )\n}\n\nexport function BetterAuthOtpCodeExample() {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-foreground text-sm font-medium\">\n        Implementation example:\n      </div>\n      <div className=\"relative\">\n        <pre className=\"bg-muted/50 overflow-x-auto rounded-lg p-4 text-sm\">\n          <code>{`import { OtpForm } from \"@/components/better-auth-otp\";\nimport { authClient } from \"@/lib/auth-client\";\nimport { toast } from \"sonner\";\n\nexport function LoginPage() {\n  return (\n    <OtpForm\n      sendOtp={async (email) => {\n        const result = await authClient.emailOtp.sendVerificationOtp({\n          email,\n          type: \"sign-in\"\n        });\n        if (result.error) throw new Error(result.error.message);\n      }}\n      verifyOtp={async (email, otp) => {\n        const result = await authClient.signIn.emailOtp({ email, otp });\n        if (result.error) throw new Error(result.error.message);\n      }}\n      onSuccess={() => {\n        toast.success(\"Signed in successfully!\");\n        window.location.href = \"/dashboard\";\n      }}\n      onError={(error) => toast.error(error)}\n      defaultEmail=\"user@example.com\"\n      resendCooldown={60}\n    />\n  );\n}`}</code>\n        </pre>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}