{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "better-auth-signup",
  "type": "registry:block",
  "title": "Better Auth Sign Up",
  "description": "A complete sign-up form component with email and password authentication using Better Auth.",
  "dependencies": [
    "zod",
    "react-hook-form",
    "@hookform/resolvers"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "card",
    "sonner",
    "https://ui.nowts.app/r/extended-form.json"
  ],
  "files": [
    {
      "path": "blocks/better-auth-signup/better-auth-signup.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { ExtendedForm, useZodForm } from \"@/components/ui/extended-form\"\n\nconst signUpSchema = z\n  .object({\n    name: z.string().min(1, \"Name is required\"),\n    email: z.string().email(\"Invalid email address\"),\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  })\n\ntype SignUpFormData = z.infer<typeof signUpSchema>\n\nexport type BetterAuthSignUpProps = {\n  onSignUp: (data: {\n    name: string\n    email: string\n    password: string\n  }) => Promise<void>\n  onSuccess?: () => void\n  onError?: (error: string) => void\n  title?: string\n  description?: string\n  signInLink?: React.ReactNode\n}\n\nexport function BetterAuthSignUp({\n  onSignUp,\n  onSuccess,\n  onError,\n  title = \"Create an account\",\n  description = \"Enter your details to get started\",\n  signInLink,\n}: BetterAuthSignUpProps) {\n  const [isLoading, setIsLoading] = useState(false)\n\n  const form = useZodForm({\n    schema: signUpSchema,\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  })\n\n  const handleSubmit = async (data: SignUpFormData) => {\n    setIsLoading(true)\n    try {\n      await onSignUp({\n        name: data.name,\n        email: data.email,\n        password: data.password,\n      })\n      onSuccess?.()\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Failed to create account\"\n      onError?.(errorMessage)\n      toast.error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card className=\"mx-auto w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ExtendedForm form={form} onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Name</Label>\n            <Input\n              id=\"name\"\n              placeholder=\"John Doe\"\n              {...form.register(\"name\")}\n              disabled={isLoading}\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-destructive text-sm\">\n                {form.formState.errors.name.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"john@example.com\"\n              {...form.register(\"email\")}\n              disabled={isLoading}\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-destructive text-sm\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              {...form.register(\"password\")}\n              disabled={isLoading}\n            />\n            {form.formState.errors.password && (\n              <p className=\"text-destructive text-sm\">\n                {form.formState.errors.password.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              {...form.register(\"confirmPassword\")}\n              disabled={isLoading}\n            />\n            {form.formState.errors.confirmPassword && (\n              <p className=\"text-destructive text-sm\">\n                {form.formState.errors.confirmPassword.message}\n              </p>\n            )}\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? \"Creating account...\" : \"Sign up\"}\n          </Button>\n\n          {signInLink && (\n            <div className=\"text-muted-foreground text-center text-sm\">\n              {signInLink}\n            </div>\n          )}\n        </ExtendedForm>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:page",
      "target": "app/sign-up/page.tsx"
    }
  ],
  "categories": [
    "authentication"
  ]
}