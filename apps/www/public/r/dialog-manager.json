{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog-manager",
  "type": "registry:block",
  "title": "Dialog Manager",
  "description": "A powerful dialog manager for handling confirm, input, and custom dialogs with global state management.",
  "dependencies": [
    "zustand"
  ],
  "registryDependencies": [
    "alert-dialog",
    "button",
    "input",
    "label",
    "sonner"
  ],
  "files": [
    {
      "path": "blocks/dialog-manager/dialog-types.ts",
      "content": "import type { ReactNode } from \"react\"\nimport type { LucideIcon } from \"lucide-react\"\n\nexport type DialogVariant = \"default\" | \"destructive\" | \"warning\"\nexport type DialogSize = \"sm\" | \"md\" | \"lg\"\n\nexport type DialogAction = {\n  label: ReactNode\n  onClick?: () => void | Promise<void>\n  variant?: \"default\" | \"destructive\"\n}\n\nexport type DialogCancel = {\n  label: ReactNode\n  onClick?: () => void | Promise<void>\n}\n\nexport type DialogBaseConfig = {\n  id?: string\n  title?: string\n  description?: ReactNode\n  icon?: LucideIcon\n  variant?: DialogVariant\n  size?: DialogSize\n  style?: \"default\" | \"centered\"\n}\n\nexport type ConfirmDialogConfig = DialogBaseConfig & {\n  type: \"confirm\"\n  confirmText?: string\n  action: DialogAction\n  cancel?: DialogCancel\n}\n\nexport type InputDialogConfig = DialogBaseConfig & {\n  type: \"input\"\n  input: {\n    label: string\n    defaultValue?: string\n    placeholder?: string\n  }\n  action: Omit<DialogAction, \"onClick\"> & {\n    onClick: (inputValue?: string) => void | Promise<void>\n  }\n  cancel?: DialogCancel\n}\n\nexport type CustomDialogConfig = DialogBaseConfig & {\n  type: \"custom\"\n  children: ReactNode\n}\n\nexport type DialogConfig =\n  | ConfirmDialogConfig\n  | InputDialogConfig\n  | CustomDialogConfig\n\nexport type Dialog = DialogConfig & {\n  id: string\n  loading?: boolean\n}\n",
      "type": "registry:lib",
      "target": "lib/dialog-manager/dialog-types.ts"
    },
    {
      "path": "blocks/dialog-manager/dialog-factory.ts",
      "content": "import type {\n  ConfirmDialogConfig,\n  CustomDialogConfig,\n  Dialog,\n  DialogConfig,\n  InputDialogConfig,\n} from \"./dialog-types\"\n\nfunction generateDialogId(): string {\n  return Math.random().toString(36).slice(2, 9)\n}\n\nexport const DialogFactory = {\n  confirm: (config: Omit<ConfirmDialogConfig, \"type\">): Dialog => ({\n    ...config,\n    type: \"confirm\",\n    id: generateDialogId(),\n    loading: false,\n  }),\n\n  input: (config: Omit<InputDialogConfig, \"type\">): Dialog => ({\n    ...config,\n    type: \"input\",\n    id: generateDialogId(),\n    loading: false,\n  }),\n\n  custom: (config: Omit<CustomDialogConfig, \"type\">): Dialog => ({\n    ...config,\n    type: \"custom\",\n    id: generateDialogId(),\n    loading: false,\n  }),\n\n  fromConfig: (config: Omit<DialogConfig, \"id\">): Dialog => {\n    const id = generateDialogId()\n\n    switch (config.type) {\n      case \"confirm\":\n        return { ...config, id, loading: false } as Dialog\n      case \"input\":\n        return { ...config, id, loading: false } as Dialog\n      case \"custom\":\n        return { ...config, id, loading: false } as Dialog\n      default:\n        throw new Error(`Unknown dialog type`)\n    }\n  },\n}\n",
      "type": "registry:lib",
      "target": "lib/dialog-manager/dialog-factory.ts"
    },
    {
      "path": "blocks/dialog-manager/dialog-store.ts",
      "content": "\"use client\"\n\nimport { toast } from \"sonner\"\nimport { create } from \"zustand\"\n\nimport { DialogFactory } from \"./dialog-factory\"\nimport type { Dialog, DialogConfig } from \"./dialog-types\"\n\ntype DialogStore = {\n  dialogs: Dialog[]\n  activeDialog: Dialog | null\n\n  addDialog: (config: Omit<DialogConfig, \"id\">) => string\n  removeDialog: (id: string) => void\n  setLoading: (id: string, loading: boolean) => void\n  clear: () => void\n}\n\nexport const useDialogStore = create<DialogStore>((set) => ({\n  dialogs: [],\n  activeDialog: null,\n\n  addDialog: (config) => {\n    const dialog = DialogFactory.fromConfig(config)\n\n    set((state) => ({\n      dialogs: [...state.dialogs, dialog],\n      activeDialog: state.activeDialog ?? dialog,\n    }))\n\n    return dialog.id\n  },\n\n  removeDialog: (id) =>\n    set((state) => {\n      const dialogs = state.dialogs.filter((d) => d.id !== id)\n      return {\n        dialogs,\n        activeDialog: dialogs[0] ?? null,\n      }\n    }),\n\n  setLoading: (id, loading) =>\n    set((state) => ({\n      dialogs: state.dialogs.map((d) => (d.id === id ? { ...d, loading } : d)),\n      activeDialog:\n        state.activeDialog?.id === id\n          ? { ...state.activeDialog, loading }\n          : state.activeDialog,\n    })),\n\n  clear: () => set({ dialogs: [], activeDialog: null }),\n}))\n\nexport async function handleDialogAction(\n  dialogId: string,\n  action: () => void | Promise<void>\n): Promise<void> {\n  const { setLoading, removeDialog } = useDialogStore.getState()\n\n  try {\n    setLoading(dialogId, true)\n\n    const result = action()\n\n    if (result instanceof Promise) {\n      await result\n    }\n\n    removeDialog(dialogId)\n  } catch (error) {\n    const err = error instanceof Error ? error : new Error(\"Unknown error\")\n\n    toast.error(\"Action failed\", {\n      description: err.message,\n    })\n\n    setLoading(dialogId, false)\n  }\n}\n",
      "type": "registry:lib",
      "target": "lib/dialog-manager/dialog-store.ts"
    },
    {
      "path": "blocks/dialog-manager/dialog-manager.ts",
      "content": "import { useDialogStore } from \"./dialog-store\"\nimport type {\n  ConfirmDialogConfig,\n  CustomDialogConfig,\n  InputDialogConfig,\n} from \"./dialog-types\"\n\nexport const dialogManager = {\n  confirm: (config: Omit<ConfirmDialogConfig, \"type\" | \"id\">) =>\n    useDialogStore.getState().addDialog({ ...config, type: \"confirm\" }),\n\n  input: (config: Omit<InputDialogConfig, \"type\" | \"id\">) =>\n    useDialogStore.getState().addDialog({ ...config, type: \"input\" }),\n\n  custom: (config: Omit<CustomDialogConfig, \"type\" | \"id\">) =>\n    useDialogStore.getState().addDialog({ ...config, type: \"custom\" }),\n\n  close: (id: string) => useDialogStore.getState().removeDialog(id),\n\n  closeAll: () => useDialogStore.getState().clear(),\n}\n",
      "type": "registry:lib",
      "target": "lib/dialog-manager/dialog-manager.ts"
    },
    {
      "path": "blocks/dialog-manager/dialog-component.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\n\nimport { handleDialogAction, useDialogStore } from \"./dialog-store\"\nimport type { Dialog } from \"./dialog-types\"\n\nexport function DialogComponent(props: { dialog: Dialog }) {\n  const { dialog } = props\n  const [confirmText, setConfirmText] = useState(\"\")\n  const [inputValue, setInputValue] = useState(\n    dialog.type === \"input\" ? (dialog.input.defaultValue ?? \"\") : \"\"\n  )\n\n  if (dialog.type === \"custom\") {\n    return (\n      <AlertDialog open={true}>\n        <AlertDialogContent>{dialog.children}</AlertDialogContent>\n      </AlertDialog>\n    )\n  }\n\n  const isConfirmDisabled =\n    dialog.type === \"confirm\" && dialog.confirmText\n      ? confirmText !== dialog.confirmText\n      : false\n\n  const handleAction = async () => {\n    await handleDialogAction(dialog.id, async () =>\n      dialog.action.onClick?.(dialog.type === \"input\" ? inputValue : undefined)\n    )\n  }\n\n  const handleCancel = async () => {\n    if (dialog.cancel?.onClick) {\n      await dialog.cancel.onClick()\n    } else {\n      useDialogStore.getState().removeDialog(dialog.id)\n    }\n  }\n\n  return (\n    <AlertDialog open={true} onOpenChange={handleCancel}>\n      <AlertDialogContent>\n        <AlertDialogHeader\n          className={cn({\n            \"flex flex-col items-center gap-2\": dialog.style === \"centered\",\n          })}\n        >\n          {dialog.icon && (\n            <div className=\"bg-muted flex h-10 w-10 shrink-0 items-center justify-center rounded-full\">\n              <dialog.icon className=\"size-6\" />\n            </div>\n          )}\n          <AlertDialogTitle>{dialog.title ?? \"\"}</AlertDialogTitle>\n          {typeof dialog.description === \"string\" ? (\n            <AlertDialogDescription>\n              {dialog.description}\n            </AlertDialogDescription>\n          ) : (\n            dialog.description\n          )}\n        </AlertDialogHeader>\n\n        {dialog.type === \"confirm\" && dialog.confirmText && (\n          <div className=\"space-y-2\">\n            <p>\n              Type <code className=\"font-mono\">{dialog.confirmText}</code> to\n              confirm this action.\n            </p>\n            <Input\n              autoFocus\n              value={confirmText}\n              onChange={(e) => setConfirmText(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  if (!dialog.loading && !isConfirmDisabled) {\n                    void handleAction()\n                  }\n                }\n              }}\n            />\n          </div>\n        )}\n\n        {dialog.type === \"input\" && (\n          <div className=\"mt-2\">\n            <Label>{dialog.input.label}</Label>\n            <Input\n              value={inputValue}\n              placeholder={dialog.input.placeholder}\n              onChange={(e) => setInputValue(e.target.value)}\n              ref={(ref) => ref?.focus()}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  e.preventDefault()\n                  if (!dialog.loading && !isConfirmDisabled) {\n                    void handleAction()\n                  }\n                }\n              }}\n            />\n          </div>\n        )}\n\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            disabled={dialog.loading}\n            onClick={handleCancel}\n          >\n            {dialog.cancel?.label ?? \"Cancel\"}\n          </Button>\n\n          <Button\n            disabled={dialog.loading || isConfirmDisabled}\n            onClick={handleAction}\n            variant={dialog.action.variant ?? \"default\"}\n          >\n            {dialog.action.label ?? \"OK\"}\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n}\n",
      "type": "registry:lib",
      "target": "lib/dialog-manager/dialog-component.tsx"
    },
    {
      "path": "blocks/dialog-manager/dialog-manager-renderer.tsx",
      "content": "\"use client\"\n\n// Add this file inside app/layout.tsx to render the dialogs.\nimport { DialogComponent } from \"./dialog-component\"\nimport { useDialogStore } from \"./dialog-store\"\n\nexport function DialogManagerRenderer() {\n  const activeDialog = useDialogStore((state) => state.activeDialog)\n\n  if (activeDialog) {\n    return <DialogComponent dialog={activeDialog} />\n  }\n\n  return null\n}\n",
      "type": "registry:lib",
      "target": "lib/dialog-manager/dialog-manager-renderer.tsx"
    }
  ],
  "categories": [
    "dialogs"
  ]
}