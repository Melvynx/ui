{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tanstack-form-array-demo",
  "type": "registry:example",
  "dependencies": [
    "zod",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://ui.nowts.app/r/tanstack-form.json",
    "field",
    "card",
    "button",
    "sonner"
  ],
  "files": [
    {
      "path": "examples/tanstack-form-array-demo.tsx",
      "content": "\"use client\"\n\nimport { PlusIcon, XIcon } from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card } from \"@/components/ui/card\"\nimport { Field, FieldContent } from \"@/components/ui/field\"\nimport {\n  FormLabel,\n  FormMessage,\n  useForm,\n} from \"@/components/ui/tanstack-form\"\n\nconst teamSchema = z.object({\n  teamName: z.string().min(2, \"Team name must be at least 2 characters\"),\n  users: z\n    .array(\n      z.object({\n        email: z.string().email(\"Please enter a valid email address\"),\n      })\n    )\n    .min(1, \"You must add at least one user\")\n    .max(10, \"Maximum 10 users allowed\"),\n})\n\nexport default function TanstackFormArrayDemo() {\n  const form = useForm({\n    schema: teamSchema,\n    defaultValues: {\n      teamName: \"\",\n      users: [{ email: \"\" }],\n    },\n    onSubmit: async (values) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n      toast.success(\"Team created!\", {\n        description: `${values.teamName} with ${values.users.length} members`,\n      })\n      console.log(values)\n    },\n  })\n\n  return (\n    <Card className=\"mx-auto w-full max-w-2xl p-6\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          e.stopPropagation()\n          form.handleSubmit()\n        }}\n        className=\"space-y-6\"\n      >\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold\">Create Team</h3>\n          <p className=\"text-muted-foreground text-sm\">\n            Add team members by email address\n          </p>\n        </div>\n\n        <form.AppField name=\"teamName\">\n          {(field) => (\n            <Field>\n              <FormLabel>Team Name</FormLabel>\n              <FieldContent>\n                <field.Input placeholder=\"Engineering Team\" />\n                <FormMessage />\n              </FieldContent>\n            </Field>\n          )}\n        </form.AppField>\n\n        <form.AppField name=\"users\" mode=\"array\">\n          {(usersField) => (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"text-sm font-medium\">Team Members</h4>\n                  <p className=\"text-muted-foreground text-sm\">\n                    Add email addresses for team members (1-10 users)\n                  </p>\n                </div>\n                <Button\n                  type=\"button\"\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => usersField.pushValue?.({ email: \"\" })}\n                  disabled={usersField.state.value.length >= 10}\n                >\n                  <PlusIcon className=\"mr-2 size-4\" />\n                  Add User\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {usersField.state.value.map((_, index) => (\n                  <form.AppField key={index} name={`users[${index}].email`}>\n                    {(field) => (\n                      <div className=\"flex items-start gap-2\">\n                        <div className=\"flex-1\">\n                          <field.Input\n                            type=\"email\"\n                            placeholder=\"user@example.com\"\n                          />\n                          <FormMessage />\n                        </div>\n                        <Button\n                          type=\"button\"\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => usersField.removeValue?.(index)}\n                          disabled={usersField.state.value.length === 1}\n                        >\n                          <XIcon className=\"size-4\" />\n                        </Button>\n                      </div>\n                    )}\n                  </form.AppField>\n                ))}\n              </div>\n\n              <FormMessage />\n            </div>\n          )}\n        </form.AppField>\n\n        <form.AppForm>\n          <form.SubmitButton className=\"w-full\">\n            {form.state.isSubmitting ? \"Creating...\" : \"Create Team\"}\n          </form.SubmitButton>\n        </form.AppForm>\n      </form>\n    </Card>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}