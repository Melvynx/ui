{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "extended-form-demo",
  "type": "registry:example",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "https://ui.nowts.app/r/extended-form.json",
    "card",
    "input",
    "label",
    "button",
    "sonner"
  ],
  "files": [
    {
      "path": "examples/extended-form-demo.tsx",
      "content": "\"use client\"\n\nimport { toast } from \"sonner\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { ExtendedForm, useZodForm } from \"@/components/ui/extended-form\"\n\nconst profileSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  bio: z.string().max(160, \"Bio must be less than 160 characters\"),\n})\n\nexport default function ExtendedFormDemo() {\n  const form = useZodForm({\n    schema: profileSchema,\n    defaultValues: {\n      name: \"Melvyn Malherbe\",\n      username: \"melvynx\",\n      bio: \"Full-stack developer passionate about building great products\",\n    },\n  })\n\n  const onSubmit = async (data: z.infer<typeof profileSchema>) => {\n    await new Promise((resolve) => setTimeout(resolve, 1500))\n    toast.success(\"Profile updated successfully!\")\n    console.log(data)\n  }\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold\">Edit Profile</h3>\n        <p className=\"text-muted-foreground text-sm\">\n          Update your profile information with automatic validation\n        </p>\n      </div>\n\n      <ExtendedForm form={form} onSubmit={onSubmit} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Name</Label>\n          <Input id=\"name\" {...form.register(\"name\")} />\n          {form.formState.errors.name && (\n            <p className=\"text-destructive text-sm\">\n              {form.formState.errors.name.message}\n            </p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"username\">Username</Label>\n          <Input id=\"username\" {...form.register(\"username\")} />\n          {form.formState.errors.username && (\n            <p className=\"text-destructive text-sm\">\n              {form.formState.errors.username.message}\n            </p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"bio\">Bio</Label>\n          <Input\n            id=\"bio\"\n            {...form.register(\"bio\")}\n            placeholder=\"Tell us about yourself\"\n          />\n          {form.formState.errors.bio && (\n            <p className=\"text-destructive text-sm\">\n              {form.formState.errors.bio.message}\n            </p>\n          )}\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            type=\"submit\"\n            disabled={form.formState.isSubmitting}\n            className=\"flex-1\"\n          >\n            {form.formState.isSubmitting ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()}>\n            Reset\n          </Button>\n        </div>\n      </ExtendedForm>\n    </Card>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}